<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-04-14T11:15:45-07:00</updated><id>http://localhost:4000/</id><title type="html">The Bloggining</title><subtitle>The Bloggining! A catalog of projects and all things embedded programming, electrical and electronics design / engineering and occasionally aerospace. 
</subtitle><entry><title type="html">Google Assistant &amp;amp; Particle Wake-On-LAN</title><link href="http://localhost:4000/2017/04/13/google-assistant-&-particle-wake-on-lan.html" rel="alternate" type="text/html" title="Google Assistant &amp; Particle Wake-On-LAN" /><published>2017-04-13T12:00:00-07:00</published><updated>2017-04-13T12:00:00-07:00</updated><id>http://localhost:4000/2017/04/13/google-assistant-&amp;-particle-wake-on-lan</id><content type="html" xml:base="http://localhost:4000/2017/04/13/google-assistant-&amp;-particle-wake-on-lan.html">&lt;p&gt;I was trying out the new Raspberry Pi Particle Beta and put together a quick project with IFTTT and Google Assistant to turn on computers with voice commands. It was based on a similar Hackster.io project that used the Spark Core / Photon and a companion Android app to send WOL packets. The original article is &lt;a href=&quot;https://www.hackster.io/pombeirp/particle-wake-on-lan-2a1bb5&quot;&gt;here&lt;/a&gt; and my replication of the project is noted in “Replications” at the bottom of the page.&lt;/p&gt;</content><author><name></name></author><summary type="html">I was trying out the new Raspberry Pi Particle Beta and put together a quick project with IFTTT and Google Assistant to turn on computers with voice commands. It was based on a similar Hackster.io project that used the Spark Core / Photon and a companion Android app to send WOL packets. The original article is here and my replication of the project is noted in “Replications” at the bottom of the page.</summary></entry><entry><title type="html">The Bloggining! A Jekyll Tutorial</title><link href="http://localhost:4000/2017/04/11/the-bloggining-a-jekyll-tutorial.html" rel="alternate" type="text/html" title="The Bloggining! A Jekyll Tutorial" /><published>2017-04-11T10:01:35-07:00</published><updated>2017-04-11T10:01:35-07:00</updated><id>http://localhost:4000/2017/04/11/the-bloggining-a-jekyll-tutorial</id><content type="html" xml:base="http://localhost:4000/2017/04/11/the-bloggining-a-jekyll-tutorial.html">&lt;p&gt;I’ve been hearing a lot of goods things about Jekyll for a while now. The idea of stepping away from the more complicated CMS like Wordpress that I’ve used in the past seems appealing for a simple site. The project I had in mind (this site) was a blog to catalog or document various projects in a single location which sounded perfect for what GitHub Pages and Jekyll had to offer. One thing that made this setup slightly more complicated was the desire to have a site that I could modify and serve locally to then push to GitHub Pages. The easier route since GitHub Pages is integrated with Jekyll would be to setup a github page, choose a theme, and add some posts.&lt;/p&gt;
&lt;h3 id=&quot;installing-ruby-rubygems-and-jekyll-ubuntu&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Installing Ruby, Rubygems, and Jekyll (Ubuntu)&lt;/h3&gt;
&lt;p&gt;At the time of writing this, Jekyll needs version 2.0 and the apt “ruby-full” package provides Ruby 2.3. I should probably be using a Ruby version manager like rbenv or RVM but oh well. The –user-install flag installs the gem inside the home directory. Running gem environment will tell you where the user installation directory is to add it to your path.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get install ruby-full
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo gem update --system
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gem install jekyll --user-install
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gem install jekyll bundler --user-install
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;gem environment
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:/home/username//.gem/ruby/2.3.0/bin
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;creating-a-site-and-selecting-a-theme&quot;&gt;&lt;a href=&quot;#header-3&quot;&gt;&lt;/a&gt;Creating a Site and Selecting a Theme&lt;/h3&gt;
&lt;p&gt;The easy part is the following three commands which create a new Jekyll site and serve it on the preview server.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;jekyll new myblog
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myblog
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;jekyll serve myblog 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;And the site is up at localhost:4000. Wasn’t that easy compared to setting up a LAMP server! Since I want the midnight theme I replaced “minima” in the gemfile with “jekyll-theme-midnight” and theme: jekyll-theme-midnight to the _config.yml file. Before building with the new theme a couple of changes need to be made to the default site because not everything supported in the default theme minima is supported by midnight. I primarily made the following changes:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Deleted with the about.md file.&lt;/li&gt;
  &lt;li&gt;Copied the post.html and home.html layouts from the minima theme.&lt;/li&gt;
  &lt;li&gt;Added a defaults.html layout from the midnight theme and made some small changes. The defaults.html in _layouts (as well as any other files with the same name) will overwrite the defaults.html in the gem file.&lt;/li&gt;
  &lt;li&gt;Added some custom share icons based on the article &lt;a href=&quot;http://tomhohenstein.com/Jekyll-Custom-Share-Buttons/&quot;&gt;here&lt;/a&gt; and a tiny bit of custom style to /assets/css/style.scss.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The &lt;a href=&quot;https://jekyllrb.com/docs/home/&quot;&gt;Jekyll documentation&lt;/a&gt; on content creation as well as the themes own index.md provides almost all the information needed for blogging basics.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;bundle install
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now all that’s left is to push to a &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; site.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’ve been hearing a lot of goods things about Jekyll for a while now. The idea of stepping away from the more complicated CMS like Wordpress that I’ve used in the past seems appealing for a simple site. The project I had in mind (this site) was a blog to catalog or document various projects in a single location which sounded perfect for what GitHub Pages and Jekyll had to offer. One thing that made this setup slightly more complicated was the desire to have a site that I could modify and serve locally to then push to GitHub Pages. The easier route since GitHub Pages is integrated with Jekyll would be to setup a github page, choose a theme, and add some posts. Installing Ruby, Rubygems, and Jekyll (Ubuntu) At the time of writing this, Jekyll needs version 2.0 and the apt “ruby-full” package provides Ruby 2.3. I should probably be using a Ruby version manager like rbenv or RVM but oh well. The –user-install flag installs the gem inside the home directory. Running gem environment will tell you where the user installation directory is to add it to your path. $ sudo apt-get install ruby-full $ sudo gem update --system $ gem install jekyll --user-install $ gem install jekyll bundler --user-install $ gem environment $ export PATH=$PATH:/home/username//.gem/ruby/2.3.0/bin Creating a Site and Selecting a Theme The easy part is the following three commands which create a new Jekyll site and serve it on the preview server. $ jekyll new myblog $ cd myblog $ jekyll serve myblog And the site is up at localhost:4000. Wasn’t that easy compared to setting up a LAMP server! Since I want the midnight theme I replaced “minima” in the gemfile with “jekyll-theme-midnight” and theme: jekyll-theme-midnight to the _config.yml file. Before building with the new theme a couple of changes need to be made to the default site because not everything supported in the default theme minima is supported by midnight. I primarily made the following changes: Deleted with the about.md file. Copied the post.html and home.html layouts from the minima theme. Added a defaults.html layout from the midnight theme and made some small changes. The defaults.html in _layouts (as well as any other files with the same name) will overwrite the defaults.html in the gem file. Added some custom share icons based on the article here and a tiny bit of custom style to /assets/css/style.scss.</summary></entry></feed>